import RPi.GPIO as GPIO
import time

# Define GPIO pin numbers
TRIG_PIN = 24
ECHO_PIN = 23
LED_PIN = 16

# Initialize GPIO settings
GPIO.setwarnings(False)  # Disable warnings
GPIO.setmode(GPIO.BCM)   # Use BCM pin numbering
GPIO.setup(TRIG_PIN, GPIO.OUT)
GPIO.setup(ECHO_PIN, GPIO.IN)
GPIO.setup(LED_PIN, GPIO.OUT)

# Create a PWM object for controlling the LED
led_pwm = GPIO.PWM(LED_PIN, 100)  # Set PWM frequency to 100 Hz

def calculateDistance():
    # Trigger the ultrasonic sensor to send a pulse
    GPIO.output(TRIG_PIN, True)
    time.sleep(0.00001)  # Wait for a short time
    GPIO.output(TRIG_PIN, False)

    # Measure the time it takes for the echo signal to return
    while GPIO.input(ECHO_PIN) == 0:
        pulse_start = time.time()

    while GPIO.input(ECHO_PIN) == 1:
        pulse_end = time.time()

    # Calculate the distance in centimeters using the time difference
    pulse_duration = pulse_end - pulse_start
    distance = pulse_duration * 17150  # Speed of sound = 17150 cm/s

    return round(distance, 2)

try:
    led_pwm.start(0)  # Start PWM with 0% duty cycle
    while True:
        distance = calculateDistance()
        print(f"Distance: {distance} cm")

        # Map the distance to LED intensity (0% to 100%)
        if distance < 50:
            intensity = 100 - ((distance / 50) * 100)
            print(f"Intensity: {intensity}%")
            # Update LED intensity
            led_pwm.ChangeDutyCycle(intensity)
        else:
            led_pwm.ChangeDutyCycle(0)  # Turn off the LED

        time.sleep(1)  # Wait for 1 second

except KeyboardInterrupt:
    led_pwm.stop()  # Stop PWM on exit
    GPIO.cleanup()  # Clean up GPIO settings
